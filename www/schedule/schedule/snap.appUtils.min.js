// ReSharper disable CoercedEqualsUsing
// Todo: Provide a comment indicating what this file is for.
(function (global, $) {

    var snap = global.snap = global.snap || {};
    $.extend(snap, {
        datetimeShortFormatString: "mm/dd/yyyy",
        datetimeFormatString1: "MMM dd, yyyy",
        dateConversion: {
            //for adminSchedule.viewmodel
            formatConsultationDuration: function (consultationDuration) {
                if ($.trim(consultationDuration) !== "") {
                    var seconds = Math.floor(consultationDuration % 60);
                    var minutes = Math.floor(consultationDuration / 60);
                    var hours = 0;
                    if (minutes >= 60) {
                        hours = Math.floor(minutes / 60);
                        minutes = Math.floor(minutes % 60);
                    }

                    minutes = minutes < 10 ? "0" + minutes : minutes;
                    seconds = seconds < 10 ? "0" + seconds : seconds;
                    hours = hours < 10 ? "0" + hours : hours;

                    return [(hours === "00" ? "" : (hours + ":")), minutes, ":", seconds].join("");
                }

                return "00:00";
            },
            parseIsoDatetime: function (dtstr) {
                var dt = dtstr.split(/[: T-]/).map(parseFloat);
                return new Date(dt[0], dt[1] - 1, dt[2], dt[3] || 0, dt[4] || 0, dt[5] || 0, 0);
            },
            ConveMonthToString: function (month) {
                if (month == "") {
                    return "";
                }
                var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                return monthNames[month - 1];
            },

            /********************************
             * This function ignore time zone.
             * Example:
             *     Thu Nov 12 2015 00:00:00 GMT+0600   => Nov 12, 2015
             *     Thu Nov 12 2015 00:00:00 GMT-0800   => Nov 12, 2015
            *********************************/
            //\Scripts\pagevm\admin\scheduler.viewmodel.js(181)
            ConvertDateToString: function (date) {
                var yyyy = date.getFullYear().toString();
                var dd = date.getDate().toString();
                return (snap.dateConversion.ConveMonthToString(date.getMonth() + 1) + " " + (dd[1] ? dd : "0" + dd[0]) + ", " + yyyy);
            },

            ConvertDayMonthToString: function (date) {
                var dd = date.getDate().toString();
                var mm = date.getMonth() + 1;
                return mm + "/" + dd;
            },
            ConvertMonthYearToString: function (date) {
                var yyyy = date.getFullYear().toString();
                return (snap.dateConversion.ConveMonthToString(date.getMonth() + 1) + ", " + yyyy);
            }

        },
        datepickers: {
            initializeDatePickerPlaceholders: function () {
                $(".datepicker,.datepickerDOB,.datepickerConsultation").attr("placeholder", snap.datetimeShortFormatString);
                $(".datepickerPlaceholder").attr("placeholder", snap.datetimeShortFormatString);
                $("#txtDOB").attr("placeholder", snap.datetimeShortFormatString);
            },
            initializeDatePicker: function (selector, maxDate, minDate, format) {
                function onChange() {
                }
                if (maxDate) {
                    $(selector).kendoDatePicker({
                        format: format || snap.datetimeFormatString1,
                        parseFormats: [snap.datetimeFormatString1, "M/d/yyyy", "dd.MM.yyyy", "dd.MM.yy", "dd.MM", "MM/dd/yyyy", "MM/dd", "MM/dd/yy"],
                        min: minDate || snap.dateLimits.getStartDate(),
                        max: maxDate,
                        change: onChange,
                    }).data("kendoDatePicker");
                } else {
                    $(selector).kendoDatePicker({
                        format: format || snap.datetimeFormatString1,
                        parseFormats: [snap.datetimeFormatString1, "M/d/yyyy", "dd.MM.yyyy", "dd.MM.yy", "dd.MM", "MM/dd/yyyy", "MM/dd", "MM/dd/yy"],
                        min: minDate || snap.dateLimits.getStartDate(),
                        change: onChange,
                    });
                }
            },

        },

        dateValidation: {
            isDST: function (t) {
                var jan = new Date(t.getFullYear(), 0, 1);
                var jul = new Date(t.getFullYear(), 6, 1);
                return Math.min(jan.getTimezoneOffset(), jul.getTimezoneOffset()) == t.getTimezoneOffset();
            },
            validateDOB: function (inDate) {
                var errMsg = "";

                if (inDate == null || inDate == "" || typeof (inDate) == "undefined") {
                    return "Please select Date of Birth";
                }
                var date = new Date(inDate);

                var date_regex_old = /^(0[1-9]|1[012])[\/](0[1-9]|[12][0-9]|3[01])[\/](19|20)\d\d$/;
                var date_regex = /^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[ ](0[1-9]|[12][0-9]|3[01])[,][ ](19|20)\d\d$/;


                if (date > snap.dateLimits.getTodayMaxDate()) {
                    errMsg = errMsg + "Date of birth cannot be in the future";
                }
                if ((typeof (inDate) === "string") && (!date_regex.test(inDate)) && (!date_regex_old.test(inDate))) {
                    errMsg = errMsg + "Please enter a valid Date of Birth " + snap.datetimeShortFormatString;
                }

                return errMsg;

            },

        },
        dateLimits: {
            getTodayMaxDate: function () {
                var dt = new Date();
                dt.setDate(dt.getDate() + 1);
                return dt.toISOString().slice(0, 19) + 'Z';
            },


            getMinScheduledDate: function () {
                var minDate = new Date();
                minDate.setDate(minDate.getDate() - 1);
                return minDate;
            },
            getMinDOBforEmail: function () {
                var d = new Date();
                var currentYear = d.getFullYear();
                var startingYear = (currentYear) - 12;
                var startDate = new Date(startingYear, d.getMonth(), d.getDate());
                return startDate;
            },

            getHealthPlanMaxDate: function () {
                var d = new Date();
                var currentYear = d.getFullYear();
                var startingYear = (currentYear) - 13;
                var startDate = new Date(startingYear, d.getMonth(), d.getDate());
                return startDate;
            },

            getStartDate: function () {
                var d = new Date();
                var currentYear = d.getFullYear();
                var startingYear = (currentYear) - 130;
                var startDate = new Date(startingYear, d.getMonth(), d.getDate());
                return startDate;
            }


        }

    });

    $(document).ready(function () {

        $('.datepicker, .timepicker, .enddateformat, .startdateformat').focus(function () {
            var that = this;
            setTimeout(function () {
                $(that).select();
            });
        });
        $('.timepicker').kendoTimePicker({
            format: "h:mm tt",
            parseFormats: ["HH:mm"]
        });
        snap.datepickers.initializeDatePicker('.datepicker', null);

        // Datepicker for Birthdate
        snap.datepickers.initializeDatePicker('.datepickerDOB', snap.dateLimits.getStartDate());


        // past date disable
        snap.datepickers.initializeDatePicker("#txtDOB", snap.dateLimits.getTodayMaxDate(), null, snap.datetimeFormatString1);
        snap.datepickers.initializeDatePickerPlaceholders();
        // allow leading plus(+) sign and alpha-numeric[no special char]
        $('.phoneSnapInput').bind("keypress", function (event) {
            if (event.charCode == 43 && $(this).val().indexOf('+') == -1) {
                // (+) sign as a first char
            }
            else if (event.charCode != 0) {
                var regex = new RegExp("^[0-9]+$");
                var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
                if (!regex.test(key)) {
                    event.preventDefault();
                    return false;
                }
            }
        });

    });
})(window, $);


// Format ISO local time yyyt-mm-ddThh:mm
Date.prototype.toLocalISO = function () {
    var date = new Date(Date.UTC(this.getFullYear(), this.getMonth(), this.getDate(), this.getHours(), this.getMinutes()));
    return date.toJSON().substring(0, 16)
}

;
(function(global, $) {
    if (snap.hub && snap.hub.hubModel) {
        return;
    }
    snap.namespace("snap.hub")
        .define("hubModel", function() {
            var scope = this,
                eventList = {},
                $hub = null;

            this.triggerEvent = function(name) {
                var args = Array.prototype.slice.call(arguments).slice(1, arguments.length);
                var eventCbList = eventList[name];
                if (eventCbList) {
                    $.each(eventCbList, function() {
                        return this.apply(scope, args);
                    });
                }
            };
            this.off = function (eventName) {
                eventList[eventName] = [];
                return this;
            };
            this.on = function(eventName, cb) {
                var eventCbList = eventList[eventName];
                if (!eventCbList) {
                    eventCbList = [];
                }
                eventCbList.push(cb);
                eventList[eventName] = eventCbList;
                return this;
            };

            this.invoke = function (eventName) {
                if ($hub && $hub.invoke) {
                    return $hub.invoke.apply($hub, arguments);
                } else {
                    return $.Deferred().reject();
                }
            };

            this._initModel = function(hub, scope) {
                $hub = hub;
                $.extend(scope, this);
            };
        });
})(window, jQuery);

// snap.session.js
// Provides session timeout monitoring for application end-users.
// Dependencies: jQuery, SignalR, server-generated SignalR module ("~/signalr/hubs")
;
(function(global, $) {
    if (snap.hub && snap.hub.mainHub) {
        return;
    }

    snap.namespace("snap.hub").use(["snap.hub.hubModel"])
        .define("mainHub", function($hubModel) {

            var snap = global.snap = global.snap || {},
                scope = this,
                hubs = [],
                isInitialized = false;

            $hubModel._initModel(null, this);

            var initConnection = function() {
                if (isInitialized) {
                    return;
                }
                isInitialized = true;

                $.connection.hub.logging = true;
                $.connection.hub.qs = {};
                hubs = [];

                if (snap.userSession && snap.userSession.token) {
                    $.connection.hub.qs["Bearer"] = snap.userSession.token;
                } else {
                    snap.getSnapUserSession();
                    if(!snap.userSession && snap.redirectToLogin && !(snap.publicPage || snap.loginPage)){
                        // if userSession is not defined
                        snap.redirectToLogin();
                    }
                }
            };

            var onStart = function() {
                window.console.log("SignalR: started");
                scope.triggerEvent("start");
                $.each(hubs, function(index, hub) {
                    hub.triggerEvent("start");
                    if (hub.markAsStarted) {
                        hub.markAsStarted(true);
                    }
                });
            };
            var hubReconnctTimer = null;
            var numberofRetry = 0;
            var notificationIsActive = false;



            var onDisconnect = function() {
                var wasConsultation = snap.ConsultationPage;
                console.log("SignalR: disconnected");
                $.each(hubs, function(index, hub) {
                    if (hub.markAsStarted) {
                        hub.markAsStarted(false);
                    }
                });
                if (scope.isManualStop) {
                    return;
                }

                //only show the message on consulation Page
                if (wasConsultation) {
                  //  snapInfo("Attempting to reconnect...."); //todo keep this up
                    navigator.notification.alert(
                        snap.alertInternetConnection, //'No Internet Connection.', // message
                        function() {
                          //   window.location.href = snap.redirctPage;
                          //   window.location.reload(true);
                            //return;
                        },
                        snap.appName, // title
                      snap.sessAlertDone //  'Done' // buttonName
                    );
                    return false;
                }
                if (hubReconnctTimer) {
                    clearInterval(hubReconnctTimer);
                    hubReconnctTimer = null;
                }
                hubReconnctTimer = setInterval(function () {
                    numberofRetry++;
                    if (numberofRetry >= 5 && !notificationIsActive) {

                        notificationIsActive = true;

                        navigator.notification.alert(
                            snap.ssConnectLost, //'Connection to the system is lost.', // message
                            function() {
                                // window.location.href = snap.redirctPage;
                              //   window.location.reload(true);
                                if(snap.redirctPage == undefined) {
                                 //window.location.href = "#/tab/chooseEnvironment";

                                     if (deploymentEnvLogout === "Multiple") {
                                         window.location.href = '#/tab/chooseEnvironment';
                                     } else if (cobrandApp === 'MDAmerica' && deploymentEnvLogout === "Single") {
                                         window.location.href = '#/tab/singleTheme';
                                     }else if (cobrandApp !== 'MDAmerica' && deploymentEnvLogout === "Single") {
                                         window.location.href = '#/tab/singleTheme';
                                     }else {
                                         window.location.href = '#/tab/login';
                                     }

                                } else {
                                 window.location.href = snap.redirctPage;
                                }
                            },
                            snap.appName, // title
                            snap.sessAlertDone //'Done' // buttonName
                        );
                        return false;


                      /*  var yesCall = function () {
                            snap.clearPage();
                            window.location.reload(true);
                        };

                        var noCall = function () {
                            notificationIsActive = false;
                            numberofRetry = 0;
                        }

                        snap
                            .SnapNotification()
                           .confirmationWithCallbacks("Connection to the system is lost. Do you want to refresh the page?", yesCall, noCall);*/
                    }

                    console.log("SignalR: Reconnection attempt");
                    $.connection.hub.start()
                        .done(function() {
                            if (hubReconnctTimer) {
                                clearInterval(hubReconnctTimer);
                                hubReconnctTimer = null;

                            }
                        });

                }, 1 * 30 * 1000); //todo tony.y: why so? what about using parameters form snap.config?
            };

            this.register = function(hub) {
                initConnection();
                if (typeof hub === "undefined" || !hub) {
                    return;
                }
                var args = Array.prototype.slice.call(arguments, 1);
                hub.init.apply(hub, args);
                hubs.push(hub);
            };
            this.isManualStop = false;
            this.start = function() {
                var dfd = $.Deferred();
                initConnection();
                console.log('Register Hubs_' + hubs.length);
                numberofRetry = 0;
                this.isManualStop = true;
                $.connection.hub.stop();


                window.setTimeout(function () {
                    var option = {};
                    if (snap.signalTransport && snap.signalTransport == "longpolling") {
                        option.transport = "longPolling";
                    }
                    $.connection.hub.start(option).done(function () {
                        scope.isManualStop = false;
                        dfd.resolve();
                    }).fail(function () {
                        scope.isManualStop = false;
                        dfd.reject();
                    });
                }, 100);

                return dfd.promise();
            };

            this.isHubStarted = function() {
                return $.connection.hub.state === $.signalR.connectionState.connected;
            };

            this.stop = function() {
                window.console.log("SignalR: stop");
                this.isManualStop = true;
                $.connection.hub.stop();
                isInitialized = false;
            };

            $.connection.hub.reconnected(function () {
                console.log("SignalR: reconnected");
                setTimeout(function () {
                    console.log("SignalR: hub restarting");
                    scope.start();
                }, 5000);
            });

            $.connection.hub.connectionSlow(function () {
                console.log("SignalR: connectionSlow");
            });

            $.connection.hub.stateChanged(function (change) {
                console.log("SignalR newState: " + change.newState);
                if (change.newState === $.signalR.connectionState.connected) {
                    if (hubReconnctTimer) {
                        clearInterval(hubReconnctTimer);
                        hubReconnctTimer = null;
                    }
                    onStart();
                } else if (change.newState === $.signalR.connectionState.disconnected) {

                    onDisconnect();
                }
            });
        }).singleton();
}(window, jQuery));

;
(function(global, $) {
     snap.namespace("snap.hub")
         .use(["snap.hub.hubModel", "snap.common.overlay", "snap.EventAggregator", "snap.hub.mainHub"])
         .define("sessionLimiterHub", function($hubModel, $overlay, $eventAggregator, $mainHub) {
            var sessionLimiterHub = $.connection.sessionLimiterHub,
                scope = this,
                isStarted = false,
                isInitialized = false;

            $hubModel._initModel(sessionLimiterHub, this);

            var initConnection = function() {
                $.connection.hub.qs = $.connection.hub.qs || {};
                if (snap.userSession && snap.userSession.token) {
                    $.connection.hub.qs["Bearer"] = snap.userSession.token;
                }
            };

            var initEvent = function() {
                var loginPath;
                var currentUrl = window.location.href.toLowerCase();

                if ((currentUrl.indexOf('physician/') != -1)) {
                    //loginPath = snap.clinicianLogin();
                } else if ((currentUrl.indexOf('/admin/') != -1)) {
                  //  loginPath = '/Admin/Login';
                } else if ((currentUrl.indexOf('/snapmdadmin/') != -1)) {
                    //loginPath = '/snapmdadmin/Login';
                  //  loginPath = snap.redirctPage;
                } else if ((currentUrl.indexOf('/customer/') != -1)) {
                  //  loginPath = snap.patientLogin();
                  //  loginPath = snap.redirctPage;
                }
                sessionLimiterHub.client.onSessionTerminated = function(ip)
                  {
              //     alert("You have logged in on another device and ended this session.");
                   $eventAggregator.publish("forceLogout");
                   snap.profileSession.isLogouted = true;
                   $mainHub.stop();

                    navigator.notification.alert(
                        /* 'You have logged in on another device and ended this session.',*/ // message
                        snap.sessAlertMessage,
                         function() {
                            if(snap.redirctPage == undefined) {
                                 if (deploymentEnvLogout === "Multiple") {
                                     window.location.href = '#/tab/chooseEnvironment';
                                 } else if (cobrandApp === 'MDAmerica' && deploymentEnvLogout === "Single") {
                                     window.location.href = '#/tab/singleTheme';
                                 }else if (cobrandApp !== 'MDAmerica' && deploymentEnvLogout === "Single") {
                                     window.location.href = '#/tab/singleTheme';
                                 }else {
                                     window.location.href = '#/tab/login';
                                 }

                            } else {
                             window.location.href = snap.redirctPage;
                            }
                         },
                         snap.appName, // title
                         snap.sessAlertDone // buttonName
                     );
                     return false;
                 };

                // location.href = snap.redirctPage;
                sessionLimiterHub.client.forceLogout = function(ip) {
                    if (snap.EventAggregator) {
                        snap.EventAggregator().publish("forceLogout");
                    }
                    snap.profileSession.isLogouted = true;
                    snap.clearAllSnapSessions();
                    /*   $("body").prepend("<div class=\"overlay\"></div>");

                    $(".overlay").css({
                        "position": "absolute",
                        "width": $(document).width(),
                        "height": $(document).height(),
                        "background-color": "grey",
                        "z-index": 10005, //We need such a big index in order to overlay kendo dialogWindow, it usually has 10003 index.
                    }).fadeTo(0, 0.6);

                 showSnapAlert("You have logged in on another device.", "confirmation");
                    console.log("You have logged in on another device. IP: " + ip);
                    $('#btnAlertOk').click(function() {
                       location.href = snap.redirctPage;
                    });*/


                    navigator.notification.alert(
                        snap.sessAlertMessage, //'You have logged in on another device.', // message
                        function() {
                            debugger;
                           // $overlay.toggleOverlay();
                           if(snap.redirctPage == undefined) {
                            //window.location.href = "#/tab/chooseEnvironment";

                                if (deploymentEnvLogout === "Multiple") {
                                    window.location.href = '#/tab/chooseEnvironment';
                                } else if (cobrandApp === 'MDAmerica' && deploymentEnvLogout === "Single") {
                                    window.location.href = '#/tab/singleTheme';
                                }else if (cobrandApp !== 'MDAmerica' && deploymentEnvLogout === "Single") {
                                    window.location.href = '#/tab/singleTheme';
                                }else {
                                    window.location.href = '#/tab/login';
                                }

                           } else {
                            window.location.href = snap.redirctPage;
                           }

                            // window.location.reload(true);
                           //  $timeout(function() {

                              // });
                            //return;
                        },
                        snap.appName, // title
                        snap.sessAlertDone //'Done' // buttonName
                    );
                    return false;
                };


                sessionLimiterHub.client.warnLogout = function(ip) {
                    snap.profileSession.isLogouted = true;
                    var redirectingTimeInSeconds = 5;
                  /*  snapInfo("You might have logged in on another device.");
                    console.log("You might have logged in on another device. IP: " + ip);
                    setTimeout(function() {
                        location.href = snap.redirctPage;
                    }, redirectingTimeInSeconds * 1000);
                    navigator.notification.alert(
                        'You might have logged in on another device.', // message
                        function() {
                             location.href = snap.redirctPage;
                            return;
                        },
                        snap.appName, // title
                        'Done' // buttonName
                    );
                    return false;*/
                };

                /*when a user got deactivated by admin*/
                sessionLimiterHub.client.deactivated = function() {
                    snap.userSession.token = '';
                    /*logged out mesg*/
                    var redirectingTimeInSeconds = 5;
                    var msg = "";
                    msg += "<b>Your account has been deactivated.</b> <br\>";
                    msg += "Please contact customer support regarding your account. <br\>";
                    msg += "<b>You will be logged out in " + redirectingTimeInSeconds + " seconds.</b>";
                    snapAnnouncement(msg);
                    setTimeout(function() {
                      //   window.location.href = snap.redirctPage;
                        //window.location.reload(true);
                    }, redirectingTimeInSeconds * 1000);
                };

                sessionLimiterHub.client.sessionRegistered = function() {
                    window.console.log("sessionLimiterHub: Session limiter registered");
                };
            };

            this.init = function() {
                initConnection();

                if (isInitialized) {
                    window.console.log("sessionLimiterHub was initialized before");
                    return;
                }
                isInitialized = true;

                scope.on("start", function() {
                    isStarted = true;
                    window.console.log("sessionLimiterHub started");
                });

                initEvent();
            };

            this.isHubStarted = function() {
                return isStarted;
            };

            this.isHubInitialized = function() {
                return isInitialized;
            };

            this.markAsStarted = function(value) {
                isStarted = !!value;
            };

        }).singleton();
})(window, jQuery);

// snap.session.js
// Provides session timeout monitoring for application end-users.
// Dependencies: jQuery, SignalR, server-generated SignalR module ("~/signalr/hubs")
// Append version querystring as ?v=1.7.1.0

(function(global, $) {
    var snap = global.snap = global.snap || {};

    var timeout = null;
    snap.idleTime = 0;
    var getLoginPath = function () {
        var currentUrl = window.location.href.toLowerCase();
      /*  if ((currentUrl.indexOf('/public') != -1)) {
            return currentUrl;
        }
        else if ((currentUrl.indexOf('physician/') != -1)) {
            return snap.clinicianLogin();
        } else if ((currentUrl.indexOf('/admin/') != -1)) {
            return '/Admin/Login';
        } else if ((currentUrl.indexOf('/snapmdadmin/') != -1)) {
            return '/snapmdadmin/Login';
        } else if ((currentUrl.indexOf('/customer/') != -1)) {
            return snap.patientLogin();
        }*/
    //    window.location.href = snap.redirctPage;
      //  window.location.reload(true);

    };
    $.extend(snap, {
        timeoutNotification: function (isIdleTimeout) {
            function centerize(e) {
                if (!$("." + e.sender._guid)[1]) {
                    var element = e.element.parent(),
                        eWidth = element.width(),
                        eHeight = element.height(),
                        wWidth = $(window).width(),
                        wHeight = $(window).height();

                    var newLeft = Math.floor(wWidth / 2 - eWidth / 2);
                    var newTop = Math.floor(wHeight / 2.5 - eHeight / 2);

                    e.element.parent().css({ top: newTop, left: newLeft, zIndex: 20004 });
                }
            };

            var notification = $("#sessionTimeout").kendoNotification({
                hideOnClick: false,
                autoHideAfter: 0,
                width: 400,
                show: centerize,
                templates: [{
                    type: "sessionTimeout",
                    template: $("#timeoutTemplate").html()
                }]
            }).data("kendoNotification");

            if (!notification) {
                notification = $("#sessionTimeout").kendoNotification({
                    hideOnClick: false,
                    autoHideAfter: 0,
                    width: 400,
                    show: centerize,
                    templates: [{
                        type: "sessionTimeout",
                        template: $("#timeoutTemplate").html()
                    }]
                }).data("kendoNotification");
            }
            if (notification) {
                 navigator.notification.alert(
                  //  'Your session timed out.', // message
                  snap.SessTimedOutMsg,
                    function() {
                         window.location.href = snap.redirctPage;
                      //   window.location.reload(true);
                    },
                    snap.appName, // title
                     snap.SessTimedOk //  'Done' // buttonName
                 );
                 return false;
                /*notification.show({
                    title: "Logout warning",
                    message: "Your session is about to expire. Please " + (isIdleTimeout ? "click continue button" : "refresh the page to continue") +
                        " or you will be automatically redirected to the login page."
                }, "sessionTimeout");

                $("#btn-sessionRenew").on("click", function () {
                    // Stop timer in case we choose a different method to refresh.
                    clearTimeout(timeout);
                    notification.hide();
                });

                $("#btn-sessionLogout").on("click", function () {
                    clearTimeout(timeout);
                  //  window.location.href = snap.redirctPage;
                //   window.location.reload(true);
           });*/
            }
        },

        redirectTimeout: function () {
            timeout = setTimeout(function () {
                // window.location.href = snap.redirctPage;
              //  window.location.reload(true);
            }, 110000);
        },
        redirectToLogin: function () {
            // window.location.href = snap.redirctPage;
            // window.location.reload(true);
        },

        cancelTimeout: function () {
            snap.timeoutNotification = function () {
                window.console.log("Timeout notification received but ignored.");
                return false;
            }
        },
        clearPage: function() {
            snap.ConsultationPage = snap.isWaitingRoom = snap.loginPage = snap.isActiveWebRTC = false;
        }
    });
    var initIdleInterval = function() {
        setInterval(timerIncrement, 60000); // 1 minute
        //Zero the idle timer on mouse movement.
        $(this).mousemove(function() {
            snap.idleTime = 0;
        });
        $(this).keypress(function() {
            snap.idleTime = 0;
        });
        function timerIncrement() {
            snap.idleTime++;
            if (snap.idleTime > 29) { // 30 minutes
                if (!(snap.ConsultationPage || snap.isWaitingRoom || snap.publicPage || snap.loginPage || snap.isActiveWebRTC)) {
                    snap.redirectTimeout();
                    snap.timeoutNotification(true);
                    sessionStorage.setItem("snap_logoutError", "Due to inactivity");
                }
                snap.idleTime = 0;
            }
        };
    };

    var initSnapUserSession = function() {
        if (!snap.userSession) {
            var storedData = sessionStorage.getItem("snap_user_session");
            if (storedData) {
                snap.userSession = JSON.parse(storedData);
            }

        }
    };
    initSnapUserSession();
    initIdleInterval();
    var $mainHub = snap.resolveObject("snap.hub.mainHub");
    $mainHub.register(snap.resolveObject("snap.hub.sessionLimiterHub"));
    $mainHub.register(snap.resolveObject("snap.hub.notificationService"));

})(window, jQuery);

var snap = snap || {};
snap.model = snap.model || {};
snap.model.Common = snap.model.Common || {};

(function () {
    snap.model.Common.ComboList = kendo.data.Model.define({
        id: "id",
        fields: {
            "id": {
                type: "number"
            },
            "name": {
                type: "string"
            },
        }
    });

    snap.model.Common.userList = kendo.data.Model.define({
        id: "userID",
        fields: {
            "userID": {
                type: "number"
            },
            "lastName": {
                type: "string"
            },
            "fullName": {
                type: "string"
            },
            "profileImagePath": {
                type: "string",
                nullable: false,
                defaultValue: "images/Patient-Male.gif"
            }
        }
    });

    snap.model.Common.schedulePatient = kendo.data.Model.define({
        id: "id",
        fields: {
            "id": {
                type: 'number'
            },
            "primaryPhysician": {
                type: 'string'
            },
            "name": {
                type: "string"
            },
            "address": {
                type: 'string'
            },
            "city": {
                type: 'string'
            },
            "zipCode": {
                type: 'string'
            },
            "gender": {
                type: 'string'
            },
            "dob": {
                type: 'date'
            }
        }
    });

    snap.model.Common.scheduleConsultation = kendo.data.Model.define({
        id: "id",
        fields: {
            "id": {
                type: 'number'
            },
            "consultantId": {
                type: 'number',
                nullable: true
            },
            "assignedDoctorId": {
                type: "number",
                nullable: true
            },
            "consultantUserId": {
                type: 'number',
                nullable: true
            },
            "isNoCharge": {
                type: 'boolean',
                defaultValue: false
            },
            "scheduledTime": {
                type: "date",
                nullable: true
            },
            "scheduledDate": {
                type: "date",
                nullable: true
            },
            "schedulingReasonType": {
                type: "number",
                nullable: true
            },

            "primaryConsernId": {
                type: "string"
            },
            "primaryConsern": {
                type: "string"
            },
            "secondaryConsernId": {
                type: "string"
            },
            "secondaryConsern": {
                type: "string"
            },
            "secondaryConsernNone": {
                type: 'boolean',
                defaultValue: true
            },
            "note": {
                type: "string"
            },
            "assignedDateTime": {
                type: "date"
            },
            "conferenceKey": {
                type: 'string'
            },
            "isScheduled": {
                type: "string"
            },
            "patientId": {
                type: "number",
                nullable: true
            }
        }
    });


}());
// Ajax and logging utilities. Please keep things object-oriented.

var snap = snap || {};

$.extend(snap,
{
    util: {}
});

$.extend(snap.util,
{
    logToConsole: function (xhr, src) {
        console.log("Status " + xhr.status + " received by " + src + " call.");
        if (xhr.responseText) {
            var ex = JSON.parse(xhr.responseText);
            if (ex.Message) {
                console.log(ex.Message);
            }
        }
    },

    apiAjaxRequest: function (uri, method, data) {
        return $.ajax({
            type: method,
            url: uri,
            dataType: 'json',
            contentType: 'application/json',
            data: data ? JSON.stringify(data) : null,
        }).fail(function (xhr) {
            if (xhr.status == 401) {
              //  window.location = snap.patientLogin();
            //  window.location.href = snap.redirctPage;
            //  window.location.reload(true);
            }
            if (!snap.userAborted(xhr) && xhr.status == 0 && xhr.readyState == 0) {
              //  snapInfo("Internet connection lost.");
                navigator.notification.alert(
                    snap.alertInternetConnection, //'No Internet Connection.', // message
                    function() {
                        // window.location.href = snap.redirctPage;
                         //window.location.reload(true);
                    },
                    snap.appName, // title
                    snap.sessAlertDone //'Done' // buttonName
                );
                return false;
            }
        });
    },
    objectExits: function (obj/*,'a.b'*/) {
        var a = arguments, b = a.callee;
        if (a[1] && ~a[1].indexOf('.'))
            return b.apply(this, [obj].concat(a[1].split('.')));

        return a.length == 1 ? a[0] : (obj[a[1]] && b.apply(this, [obj[a[1]]].concat([].slice.call(a, 2))));
    },
    disableTab: function (tabId) {
        var tab = $('#patientContainer nav li.' + tabId);
        if (tab != null && !tab.hasClass('disabled')) {
            tab.addClass('disabled').removeAttr('data-tab');
        }
    },

    findIndex: function (array, keyPropertyName, key) {
        var index = -1;
        for (var i = 0; i < array.length; i++) {
            if (array[i][keyPropertyName] === key) {
                index = i;
                break;
            }
        }

        return index;
    },

    findElement: function (array, keyPropertyName, key) {
        var result = null;
        var index = this.findIndex(array, keyPropertyName, key);
        if (index > -1) {
            result = array[index];
        }

        return result;
    },

    arrayContains: function(array, subArray, keyPropertyName) {
        var containsAll = true;
        for(var i = 0; i < subArray.length; i++) {
            if(snap.util.findIndex(array, keyPropertyName, subArray[i][keyPropertyName]) < 0) {
                containsAll = false;
                break;
            }
        }

        return containsAll;
    },

    processResponsesAsSingle: function() {
        var dfd = $.Deferred();
        $.when.apply(this, arguments).done(function() {
            var responses = Array.prototype.slice.call(arguments);
            var data = [];
            var total = 0;
            responses.forEach(function(response) {
                data = data.concat(response[0].data);
                total += response[0].total || response[0].data.length;
            });
            dfd.resolve({data: data, total: total});
        });
        return dfd.promise();
    }

});
/// <reference path="../jquery-1.10.2.js" />
/// <reference path="../../core/snap.core.js" />
/// <reference path="../../core/snapNotification.js" />
/// <reference path="../../core/snapHttp.js" />



;
(function($) {
    snap.ConsulationPageType = {
        CustomerWaitingPage: 1,
        PatientPhysicianConsultationPage: 2,
        GuestParticipantConsultationPage: 3
    };

    snap.ParticipantType = {
        Physician: 1,
        Patient: 2,
        Guest: 3
    };

    snap.namespace("snap.hub").use(["snap.hub.hubModel"])
        .define("ChatHub", function($hubModel) {
            var scope = this,
                isStarted = false,
                isInitialized = false,
                chatHub = $.connection.snapChatService;

            $hubModel._initModel(chatHub, this);

            var initEvent = function() {
                chatHub.client = chatHub.client || {};
                chatHub.client.registerComplete = function() {
                    var args = Array.prototype.slice.call(arguments);
                    scope.triggerEvent("connected", args);

                };
                chatHub.client.notifyUserList = function(online, offline, busyUser, awayUser) {
                    scope.triggerEvent("notifyUserList", online, offline, busyUser, awayUser);
                };
                chatHub.client.deliverPatientNumber = function(number) {
                    scope.triggerEvent("onPatientNumberChanged", number);
                };
                chatHub.client.deliverMessageToPhysician = function(data, msg) {
                    scope.triggerEvent("deliverMessageToPhysician", data, msg);
                };
                chatHub.client.deliverMessageToPatient = function(data, msg) {
                    var _data = {
                        data: data,
                        msg: msg,
                        date: kendo.toString(new Date(), "hh:mm tt")
                    };
                    scope.triggerEvent("deliverMessageToPatient", _data);
                };
                chatHub.client.deliverToUser = function(from, to, msg) {
                    scope.triggerEvent("deliverToUser", from, to, msg);
                };
                chatHub.client.notifyPhysicianOnlineStatus = function(isOnline) {
                    scope.triggerEvent("notifyPhysicianOnlineStatus", isOnline);
                };
                chatHub.client.notifyPatietOnlineStatus = function(isOnline) {
                    scope.triggerEvent("notifyPatietOnlineStatus", isOnline);
                };
                chatHub.client.sendChatMessage = function(data) {
                    scope.triggerEvent("sendChatMessage", data);
                };
            };

            var initConnection = function(participantType) {

                $.connection.hub.qs = $.connection.hub.qs || {};

                if (snap.consultationId || snap.consultationSession) {
                    $.connection.hub.qs["consultationId"] = snap.consultationSession ? snap.consultationSession.consultationId : snap.consultationId;
                } else {
                    $.connection.hub.qs["consultationId"] = 0;
                }
                if (snap.profileSession && snap.profileSession.userId) {
                    $.connection.hub.qs["userId"] = snap.profileSession.userId;
                }
                if (participantType) {
                    $.connection.hub.qs["participantType"] = participantType;
                    if (participantType === snap.ParticipantType.Guest) {
                        // participant
                        $.connection.hub.qs["JWT-Participant"] = snap.userSession.token;
                        $.connection.hub.qs["participant"] = 1;
                        delete $.connection.hub.qs["Bearer"];
                    } else {
                        $.connection.hub.qs["Bearer"] = snap.userSession.token;
                    }
                } else {
                    $.connection.hub.qs["Bearer"] = snap.userSession.token;
                }
            };

            this.init = function (participantType) {
                initConnection(participantType);
                if (isInitialized) {
                    window.console.log("chatHub was initialized before");
                    return;
                }
                isInitialized = true;
                initEvent();
                scope.on("start", function() {
                    if (!isInitialized) {
                        return;
                    }
                    isStarted = true;
                    window.console.log("chatHub started");
                    chatHub.server.registerMe();
                });
            };

            this.isHubStarted = function() {
                return isStarted;
            };

            this.isHubInitialized = function() {
                return isInitialized;
            };

            this.markAsStarted = function(value) {
                isStarted = !!value;
            };

            this.changeStatus = function(status) {
                return chatHub.server.changeStatus(status);
            };

            this.registerMe = function() {
                return chatHub.server.registerMe();
            };

            this.sendMessageToPhysician = function(message) {
                var $def = $.Deferred();
                chatHub.server.sendMessageToPhysician(message).then(function(data) {
                    if (data && $.trim(data.msg) !== "") {
                        data.date = kendo.toString(new Date(), "hh:mm tt");
                        $def.resolve(data);
                    } else {
                        $def.reject();
                    }

                });
                return $def.promise();
            };

            this.sendMessageToParticipant = function(message) {
                return chatHub.server.sendMessageToParticipant(message);
            };

            this.sendMessageToPatient = function(message) {
                return chatHub.server.sendMessageToPatient(message);
            };

            this.sendMessageToUser = function(token, msg) {
                return chatHub.server.sendMessageToUser(token, msg);
            };

            this.getPhysicianStatus = function() {
                return chatHub.server.getPhysicianStatus();
            };

            this.refreshPatienNumberInPhysician = function(number) {
                return chatHub.server.refreshPatienNumberInPhysician(number);
            }

        }).singleton();


}(jQuery));
